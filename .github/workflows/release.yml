name: Release

on:
  push:
    tags:
      - 'v*.*.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: |
            {
              "categories": [
                {
                  "title": "## 🚀 Features",
                  "labels": ["feature", "enhancement"]
                },
                {
                  "title": "## 🐛 Bug Fixes",
                  "labels": ["bug", "fix"]
                },
                {
                  "title": "## 📝 Documentation",
                  "labels": ["documentation", "docs"]
                },
                {
                  "title": "## 🔧 Maintenance",
                  "labels": ["maintenance", "chore"]
                }
              ],
              "template": "#{{CHANGELOG}}\n\n**Full Changelog**: #{{RELEASE_DIFF}}"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.23'
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          BINARY_NAME=fileserver-${GOOS}-${GOARCH}
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build \
            -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.GitCommit=${GITHUB_SHA}" \
            -o ${BINARY_NAME} \
            .

          # Create archive
          if [ "$GOOS" = "windows" ]; then
            zip ${BINARY_NAME%.exe}.zip ${BINARY_NAME} config.yaml.example README.md
            echo "ASSET=${BINARY_NAME%.exe}.zip" >> $GITHUB_ENV
          else
            tar czf ${BINARY_NAME}.tar.gz ${BINARY_NAME} config.yaml.example README.md
            echo "ASSET=${BINARY_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Tasks
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Send notification
        run: |
          echo "Release ${{ steps.get_version.outputs.version }} completed successfully!"
          echo "Docker image: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}"
          echo "Binaries uploaded to GitHub Releases"
          echo "Docker images are built by CI workflow"

      # Uncomment to send Discord notification
      # - name: Send Discord Webhook
      #   uses: sarisia/actions-status-discord@v1
      #   if: always()
      #   with:
      #     webhook: ${{ secrets.DISCORD_WEBHOOK }}
      #     title: "Release ${{ steps.get_version.outputs.version }}"
      #     description: "New version released!"
      #     color: 0x00ff00
      #     url: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.version }}
