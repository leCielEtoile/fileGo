name: CI

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.23'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v1.64.8
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install cross-compilation tools
        if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          if [ "$GOOS" = "linux" ] && [ "$GOARCH" = "amd64" ]; then
            # Linux AMD64 build with CGO for SQLite
            CGO_ENABLED=1 go build -v -o fileserver-${{ matrix.goos }}-${{ matrix.goarch }} .
          elif [ "$GOOS" = "linux" ] && [ "$GOARCH" = "arm64" ]; then
            # Linux ARM64 build with CGO for SQLite (cross-compile)
            CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc go build -v -o fileserver-${{ matrix.goos }}-${{ matrix.goarch }} .
          else
            # Other platforms build without CGO for simplicity
            CGO_ENABLED=0 go build -v -o fileserver-${{ matrix.goos }}-${{ matrix.goarch }} .
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fileserver-${{ matrix.goos }}-${{ matrix.goarch }}
          path: fileserver-${{ matrix.goos }}-${{ matrix.goarch }}
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'
        continue-on-error: true

      - name: Upload Gosec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'gosec-results.sarif'
        continue-on-error: true

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: ${{ github.event_name == 'pull_request' && 'type=docker,dest=/tmp/image.tar' || '' }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

      - name: Upload Docker image artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.event_name == 'pull_request' && steps.meta.outputs.tags || format('{0}/{1}@{2}', env.REGISTRY, env.IMAGE_NAME, steps.build-and-push.outputs.digest) }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json
        continue-on-error: true

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90
        continue-on-error: true

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Docker image from previous job
        uses: actions/download-artifact@v5
        if: github.event_name == 'pull_request'
        with:
          name: docker-image
          path: /tmp
        continue-on-error: true

      - name: Load Docker image
        if: github.event_name == 'pull_request'
        run: docker load -i /tmp/image.tar || echo "Image not found, will build locally"
        continue-on-error: true

      - name: Create config directory
        run: |
          mkdir -p config data/uploads logs
          cp config.yaml.example config.yaml

      - name: Pull image from registry (non-PR)
        if: github.event_name != 'pull_request'
        run: docker compose pull || echo "Failed to pull, will build locally"
        continue-on-error: true

      - name: Start services
        run: docker compose up -d --no-build

      - name: Wait for container to start
        run: sleep 10

      - name: Show initial logs
        run: docker compose logs

      - name: Check container status
        run: docker compose ps

      - name: Wait for service to be ready
        run: |
          timeout 30 sh -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        continue-on-error: true

      - name: Check health endpoint
        run: curl -v http://localhost:8080/health
        continue-on-error: true

      - name: Show final logs
        if: always()
        run: docker compose logs

      - name: Stop services
        if: always()
        run: docker compose down
