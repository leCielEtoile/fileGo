name: CI

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.24'

jobs:
  lint:
    name: 🔍 コード品質チェック
    runs-on: ubuntu-latest
    steps:
      - name: 📥 コードをチェックアウト
        uses: actions/checkout@v5

      - name: 🐹 Go環境をセットアップ
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: ✨ golangci-lintを実行
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.2.0
          args: --timeout=5m
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

  test:
    name: 🧪 テスト実行
    runs-on: ubuntu-latest
    steps:
      - name: 📥 コードをチェックアウト
        uses: actions/checkout@v5

      - name: 🐹 Go環境をセットアップ
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🧪 テストを実行
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: 📊 カバレッジレポートを生成
        run: go tool cover -html=coverage.out -o coverage.html

      - name: 📤 カバレッジレポートをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  build:
    name: 🔨 バイナリビルド (${{ matrix.goos }}/${{ matrix.goarch }})
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: 📥 コードをチェックアウト
        uses: actions/checkout@v5

      - name: 🐹 Go環境をセットアップ
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔨 バイナリをビルド
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -v -ldflags="-s -w" -o fileserver-${{ matrix.goos }}-${{ matrix.goarch }} .

      - name: 📤 ビルド成果物をアップロード
        uses: actions/upload-artifact@v4
        with:
          name: fileserver-${{ matrix.goos }}-${{ matrix.goarch }}
          path: fileserver-${{ matrix.goos }}-${{ matrix.goarch }}
          retention-days: 7

  security-scan:
    name: 🔒 セキュリティスキャン
    runs-on: ubuntu-latest
    steps:
      - name: 📥 コードをチェックアウト
        uses: actions/checkout@v5

      - name: 🔒 Gosecセキュリティスキャナーを実行
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt json -out gosec-results.json ./...'
        continue-on-error: true

      - name: 📤 Gosec結果をアップロード
        uses: actions/upload-artifact@v4
        with:
          name: gosec-results
          path: gosec-results.json
          retention-days: 30
        continue-on-error: true

  docker:
    name: 🐳 Dockerビルド & プッシュ (${{ matrix.platform }})
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            platform_tag: amd64
          - platform: linux/arm64
            platform_tag: arm64
            skip_on_pr: true
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: ⏭️ PR時はARM64をスキップ
        if: github.event_name == 'pull_request' && matrix.skip_on_pr
        run: echo "PR時はARM64ビルドをスキップします" && exit 0

      - name: 📥 コードをチェックアウト
        uses: actions/checkout@v5

      - name: 🔧 QEMUをセットアップ
        if: matrix.platform == 'linux/arm64'
        uses: docker/setup-qemu-action@v3

      - name: 🔧 Docker Buildxをセットアップ
        uses: docker/setup-buildx-action@v3

      - name: 🔐 GitHub Container Registryにログイン
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 メタデータを抽出
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-${{ matrix.platform_tag }}

      - name: 🐳 Dockerイメージをビルド & プッシュ
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' && matrix.platform == 'linux/amd64' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform_tag }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform_tag }}
          outputs: ${{ github.event_name == 'pull_request' && matrix.platform == 'linux/amd64' && 'type=docker,dest=/tmp/image.tar' || '' }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

      - name: 📤 Dockerイメージをアップロード
        if: github.event_name == 'pull_request' && matrix.platform == 'linux/amd64'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

      - name: 🔍 Trivyで脆弱性スキャン
        if: matrix.platform == 'linux/amd64'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.event_name == 'pull_request' && 'tarball:/tmp/image.tar' || format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, steps.meta.outputs.version) }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📤 Trivy結果をGitHub Securityにアップロード
        if: matrix.platform == 'linux/amd64'
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  docker-manifest:
    name: 📦 Dockerマニフェスト作成
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 🔐 GitHub Container Registryにログイン
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 メタデータを抽出
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📦 マルチプラットフォームマニフェストを作成 & プッシュ
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          for tag in $TAGS; do
            docker buildx imagetools create -t ${tag} \
              ${tag}-amd64 \
              ${tag}-arm64
          done

      - name: 📋 SBOM（ソフトウェア部品表）を生成
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json
        continue-on-error: true

      - name: 📤 SBOMをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90
        continue-on-error: true

  docker-compose-test:
    name: 🧪 Docker Composeテスト
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - name: 📥 コードをチェックアウト
        uses: actions/checkout@v5

      - name: 🔧 Docker Buildxをセットアップ
        uses: docker/setup-buildx-action@v3

      - name: 📥 前ジョブからDockerイメージをダウンロード
        uses: actions/download-artifact@v5
        if: github.event_name == 'pull_request'
        with:
          name: docker-image
          path: /tmp
        continue-on-error: true

      - name: 📦 Dockerイメージをロード
        if: github.event_name == 'pull_request'
        run: docker load -i /tmp/image.tar || echo "イメージが見つかりません。ローカルでビルドします"
        continue-on-error: true

      - name: 📁 設定ディレクトリを作成
        run: |
          mkdir -p config data/uploads logs
          cp config.yaml.example config.yaml

      - name: 📥 レジストリからイメージをプル (非PR時)
        if: github.event_name != 'pull_request'
        run: docker compose pull || echo "プル失敗。ローカルでビルドします"
        continue-on-error: true

      - name: 🚀 サービスを起動
        run: docker compose up -d --build

      - name: ⏳ コンテナ起動を待機
        run: sleep 10

      - name: 📋 初期ログを表示
        run: docker compose logs

      - name: ✅ コンテナステータスを確認
        run: docker compose ps

      - name: ⏳ サービスが準備完了するまで待機
        run: |
          timeout 30 sh -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        continue-on-error: true

      - name: 🩺 ヘルスチェックエンドポイントを確認
        run: curl -v http://localhost:8080/health
        continue-on-error: true

      - name: 📋 最終ログを表示
        if: always()
        run: docker compose logs

      - name: 🛑 サービスを停止
        if: always()
        run: docker compose down
